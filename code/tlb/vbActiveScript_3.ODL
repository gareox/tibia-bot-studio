[
    uuid(FF90C48D-79F8-40c3-FF92-F880BE4ADBFF),
    helpstring("vbActiveScript Interface 3"),
    version(1.0)
]
library vbActiveScript3{

importlib("stdole2.tlb");

interface IUnknown;
interface IDispatch;
interface IActiveScriptSite;
interface IActiveScriptSiteWindow;
interface IActiveScriptSiteDebug;
interface IActiveScriptError;


#include "vbActiveScript_support.inc"

[
    dllname("dummy")  
]
module constants {
    const LPSTR IIDSTR_IUnknown              = "{00000000-0000-0000-C000-000000000046}";
    const LPSTR CATID_ActiveScript           = "{F0B7A1A1-9847-11cf-8F20-00805F2CD064}";
    const LPSTR CATID_ActiveScriptParse      = "{F0B7A1A2-9847-11cf-8F20-00805F2CD064}";  
    const LPSTR IID_IActiveScript            = "{BB1A2AE1-A4F9-11cf-8F20-00805F2CD064}";
    const LPSTR IID_IActiveScriptParse       = "{BB1A2AE2-A4F9-11cf-8F20-00805F2CD064}"; 
    const LPSTR IID_IActiveScriptSite        = "{DB01A1E3-A42B-11cf-8F20-00805F2CD064}"; 
    const LPSTR IID_IActiveScriptSiteWindow  = "{D10F6761-83E9-11cf-8F20-00805F2CD064}"; 
    const LPSTR IID_IActiveScriptError       = "{EAE1BA61-A4ED-11cf-8F20-00805F2CD064}";
}


typedef LONG SCRIPTTHREADID;

typedef enum tagSCRIPTSTATE {
        SCRIPTSTATE_UNINITIALIZED       = 0,
        SCRIPTSTATE_INITIALIZED         = 5,
        SCRIPTSTATE_STARTED             = 1,
        SCRIPTSTATE_CONNECTED           = 2,
        SCRIPTSTATE_DISCONNECTED        = 3,
        SCRIPTSTATE_CLOSED              = 4,
} SCRIPTSTATE ;

typedef enum tagSCRIPTTEXT{
	SCRIPTTEXT_DELAYEXECUTION = 0x1,
	SCRIPTTEXT_ISVISIBLE = 0x2,
	SCRIPTTEXT_ISEXPRESSION = 0x20,
	SCRIPTTEXT_ISPERSISTENT = 0x40,
	SCRIPTTEXT_HOSTMANAGESSOURCE = 0x80,
} SCRIPTTEXT;

typedef enum tagSCRIPTITEM{
	SCRIPTITEM_ISVISIBLE = 0x2,
	SCRIPTITEM_ISSOURCE = 0x4,
	SCRIPTITEM_GLOBALMEMBERS = 0x8,
	SCRIPTITEM_ISPERSISTENT = 0x40,
	SCRIPTITEM_CODEONLY = 0x200,
	SCRIPTITEM_NOCODE = 0x400,
} SCRIPTITEM;

typedef enum tagSCRIPTINFO{
	SCRIPTINFO_IUNKNOWN = 1,
	SCRIPTINFO_ITYPEINFO = 2
} SCRIPTINFO;

typedef enum tagSCRIPTTHREADSTATE {
        SCRIPTTHREADSTATE_NOTINSCRIPT   = 0,
        SCRIPTTHREADSTATE_RUNNING       = 1,
} SCRIPTTHREADSTATE ;

       


//this one we have to implement so that makes it extra picky
[
        odl,
        uuid(DB01A1E3-A42B-11cf-8F20-00805F2CD064),
]
interface IActiveScriptSite : stdole.IUnknown
{
        HRESULT GetLCID(
                [out,retval] LONG *plcid);

        HRESULT GetItemInfo(
                [in] BSTR pstrName,
                [in] SCRIPTINFO     dwReturnMask,
                [in,out] LONG  *ppiunkItem,
                [in,out] LONG *ppti
        );


        HRESULT GetDocVersionString(
                [out,retval] BSTR      *pbstrVersion
        );

        HRESULT OnScriptTerminate(
                [in]  VARIANT     *pvarResult,
                [in]  EXCEPINFO   *pexcepinfo
        );

        HRESULT OnStateChange(
                [in]  SCRIPTSTATE       ssScriptState
        );

        HRESULT OnScriptError(
                [in] IActiveScriptError *pscripterror
        );

        HRESULT OnEnterScript(void);

        HRESULT OnLeaveScript(void);


}


[
        odl,
        uuid(EAE1BA61-A4ED-11cf-8F20-00805F2CD064),
]
interface IActiveScriptError : stdole.IUnknown
{
        HRESULT GetExceptionInfo(
                [out] EXCEPINFO  *pexcepinfo
        );
        HRESULT GetSourcePosition(
                [out] LONG     *pdwSourceContext,
                [out] LONG     *pulLineNumber,
                [out] LONG      *plCharacterPosition    // -1 --> unknown
        );
        HRESULT GetSourceLineText(
                [out] BSTR      *pbstrSourceLine
        );
}

//we have to implement this one too to see visual elements like messageboxes
//or else we get error access denied on msgbox 
[
        odl,
        uuid(D10F6761-83E9-11cf-8F20-00805F2CD064),
]
interface IActiveScriptSiteWindow : IUnknown
{
        HRESULT GetWindow(
                [out,retval] LONG      *phwnd
        );

        HRESULT EnableModeless(
                [in]  BOOL      fEnable
        );
}

/*
[
        odl,
        uuid(51973C11-CB0C-11d0-B5C9-00A0244A0E7A),
]
interface IActiveScriptSiteDebug : stdole.IUnknown
{
		HRESULT GetDocumentContextFromPosition( 
            [in] LONG *dwSourceContext,
            [in] LONG *uCharacterOffset,
            [in] LONG *uNumChars,
            [out,retval] LONG *ppsc
        );
        
        HRESULT GetApplication( 
            [out,retval] LONG *ppda
        );
       
        //IDebugApplication        
        HRESULT GetRootApplicationNode( 
			[out,retval] LONG *ppdanRoot
        );

        HRESULT OnScriptErrorDebug( 
            [in] LONG *pErrorDebug,
            [in,out] BOOL *pfEnterDebugger,
            [out,retval] BOOL *pfCallOnScriptErrorWhenContinuing
            
        );
        
};
*/
/*
[
     	odl,
        uuid(51973C32-CB0C-11d0-B5C9-00A0244A0E7A)
     ]
    interface IDebugApplication : IRemoteDebugApplication
    {
    
        HRESULT SetName( 
            [in] LPSTR  pstrName) = 0;
        
        HRESULT StepOutComplete( void) = 0;
        
        HRESULT DebugOutput( 
            [in] LPSTR  pstr) = 0;
        
        HRESULT StartDebugSession( void) = 0;
        
        HRESULT HandleBreakPoint( 
            [in] BREAKREASON br,
            [in,out] BREAKRESUMEACTION  *pbra) = 0;
        
        HRESULT Close( void) = 0;
        
        HRESULT GetBreakFlags( 
            [in,out] APPBREAKFLAGS  *pabf,
            [in,out] IRemoteDebugApplicationThread  *pprdatSteppingThread) = 0;
        
        HRESULT GetCurrentThread( 
            [in,out] IDebugApplicationThread  *pat) = 0;
        
        HRESULT CreateAsyncDebugOperation( 
            [in] IDebugSyncOperation  *psdo,
            [in,out] IDebugAsyncOperation  *ppado) = 0;
        
        HRESULT AddStackFrameSniffer( 
            [in] IDebugStackFrameSniffer  *pdsfs,
            [in,out] LONG  *pdwCookie) = 0;
        
        HRESULT RemoveStackFrameSniffer( 
            [in] LONG dwCookie) = 0;
        
        HRESULT QueryCurrentThreadIsDebuggerThread( void) = 0;
        
        HRESULT SynchronousCallInDebuggerThread( 
            [in] IDebugThreadCall  *pptc,
            [in] LONG dwParam1,
            [in] LONG dwParam2,
            [in] LONG dwParam3) = 0;
        
        HRESULT CreateApplicationNode( 
            [in,out] IDebugApplicationNode  *ppdanNew) = 0;
        
        HRESULT FireDebuggerEvent( 
            [in] REFGUID riid,
            [in] IUnknown  *punk) = 0;
        
        HRESULT HandleRuntimeError( 
            [in] IActiveScriptErrorDebug  *pErrorDebug,
            [in] IActiveScriptSite  *pScriptSite,
            [in,out] BREAKRESUMEACTION  *pbra,
            [in,out] ERRORRESUMEACTION  *perra,
            [in,out] BOOL  *pfCallOnScriptError) = 0;
        
        BOOL FCanJitDebug( void) = 0;
        
        BOOL FIsAutoJitDebugEnabled( void) = 0;
        
        HRESULT AddGlobalExpressionContextProvider( 
            [in] IProvideExpressionContexts  *pdsfs,
            [in,out] LONG  *pdwCookie) = 0;
        
        HRESULT RemoveGlobalExpressionContextProvider( 
            [in] LONG dwCookie) = 0;
        
    };
*/    
    

//these ones we just have to use in our vb code not as picky
//still need to tweak the default IDL though to make it compile with Mktyplib.exe

[
        odl,
        uuid(BB1A2AE1-A4F9-11cf-8F20-00805F2CD064),
]
interface IActiveScript : stdole.IUnknown
{
        HRESULT SetScriptSite(
                [in]  IActiveScriptSite *pass
        );

        HRESULT GetScriptSite(
                [in]                UUID riid,
                [out, retval] void **ppvObject
        );

        HRESULT SetScriptState(
                [in]  SCRIPTSTATE ss
        );

        HRESULT GetScriptState(
                [out] SCRIPTSTATE *pssState
        );

        HRESULT Close(void);

        HRESULT AddNamedItem(
                [in]  LONG pstrName,
                [in]  SCRIPTITEM    dwFlags
        );

        HRESULT AddTypeLib(
                [in]  UUID   rguidTypeLib,
                [in]  LONG    dwMajor,
                [in]  LONG    dwMinor,
                [in]  LONG    dwFlags
        );

        HRESULT GetScriptDispatch(
                [in]  LPSTR pstrItemName,
                [out] IDispatch **ppdisp
        );

        HRESULT GetCurrentScriptThreadID(
                [out] SCRIPTTHREADID *pstidThread
        );

        HRESULT GetScriptThreadID(
                [in]  LONG            dwWin32ThreadId,
                [out] SCRIPTTHREADID    *pstidThread
        );

        HRESULT GetScriptThreadState(
                [in]  SCRIPTTHREADID    stidThread,
                [out] SCRIPTTHREADSTATE *pstsState
        );

        HRESULT InterruptScriptThread(
                [in]  SCRIPTTHREADID    stidThread,
                [in]  EXCEPINFO   *pexcepinfo,
                [in]  LONG        dwFlags
        );

        HRESULT Clone(
                [out] IActiveScript     **ppscript
        );

}

[
        odl,
        uuid(BB1A2AE2-A4F9-11cf-8F20-00805F2CD064),
]
interface IActiveScriptParse : stdole.IUnknown
{
        HRESULT InitNew(void);

        HRESULT AddScriptlet(
                [in]  LONG         pstrDefaultName,
                [in]  LONG         pstrCode,
                [in]  LONG         pstrItemName,
                [in]  LONG         pstrSubItemName,
                [in]  LONG         pstrEventName,
                [in]  LONG         pstrDelimiter,
                [in]  LONG            dwSourceContextCookie,
                [in]  LONG             ulStartingLineNumber,
                [in]  LONG            dwFlags,
                [out] BSTR              *pbstrName,
                [out] EXCEPINFO         *pexcepinfo
        );

        HRESULT ParseScriptText(
                [in]  BSTR         pstrCode,
                [in]  BSTR         pstrItemName,
                [in]  stdole.IUnknown          *punkContext,
                [in]  BSTR         pstrDelimiter,
                [in]  LONG            dwSourceContextCookie,
                [in]  LONG             ulStartingLineNumber,
                [in]  SCRIPTTEXT            dwFlags,
                [out] VARIANT           *pvarResult,
                [out] EXCEPINFO         *pexcepinfo
        );

	

}












}









 